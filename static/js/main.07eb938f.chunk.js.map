{"version":3,"sources":["moon.js","useSavedState.js","App.js","reportWebVitals.js","index.js"],"names":["epoch","ecliptic_longitude_epoch","ecliptic_longitude_perigee","eccentricity","sun_smaxis","sun_angular_size_smaxis","moon_mean_longitude_epoch","moon_mean_perigee_epoch","node_mean_longitude_epoch","moon_inclination","moon_eccentricity","moon_angular_size","moon_smaxis","moon_parallax","synodic_month","lunations_base","earth_radius","useSavedState","key","defaultValue","useState","savedState","localStorage","getItem","JSON","parse","e","Function","state","setState","useCallback","newState","setItem","stringify","DAY_NAMES","english","norse","french","planets","latin","japanese","astronomical","babylonian","greek","hebrew","JULIAN_PREF","App","yearPreference","setYearPreference","dayNameOrigin","setDayNameOrigin","julianPreference","setJulianPreference","yearDayPreference","setYearDayPreference","monthBands","setMonthBands","weeks","d","count","i","week","j","push","Date","setDate","getDate","makeWeeks","date","getFullYear","getMonth","getDay","startOfWeek","startOfMonth","dayHeaderStyle","fontSize","dayNames","getDayClassName","currentMonth","monthEven","yearAdjust","dayPreferences","yearDay","julian","className","value","onChange","target","type","checked","map","n","style","w","isStartOfMonth","some","currentWeek","now","dayNr","firstThursday","setMonth","Math","ceil","weekNumber","textAlign","DayView","preferences","padding","margin","border","background","startOfDay","position","julianStyle","display","top","right","lineHeight","MoonIndicator","phases","moonPhases","out","title","isSameDay","formatTime","y","getUTCFullYear","m","getUTCMonth","getUTCDate","a","b","c","f","h","getUTCHours","g","T","synodic_month_millis","epoch_new_moon","delta","lunar_cycle_count","newMoon","firstQuarter","fullMoon","lastQuarter","nextNewMoon","date1","date2","getHours","toString","padStart","getMinutes","first_jan","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAgKU,I,sCApDNA,MAAQ,U,KAGRC,yBAA2B,U,KAG3BC,2BAA6B,W,KAG7BC,aAAe,Q,KAGfC,WAAa,S,KAGbC,wBAA0B,Q,KAK1BC,0BAA4B,U,KAE5BC,wBAA0B,W,KAG1BC,0BAA4B,W,KAG5BC,iBAAmB,S,KAGnBC,kBAAoB,M,KAGpBC,kBAAoB,M,KAGpBC,YAAc,O,KAEdC,cAAgB,M,KAGhBC,cAAgB,Y,KAGhBC,eAAiB,Q,KAIjBC,aAAe,SC3JZ,SAASC,EAAeC,EAAKC,GAAe,IAAD,EAClBC,oBAAS,WACjC,IAAMC,EAAaC,aAAaC,QAAQL,GAExC,GAAIG,EACA,IACI,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,IAGb,OAAIP,aAAwBQ,SACjBR,IAGJA,KAdmC,mBACtCS,EADsC,KAC/BC,EAD+B,KAuB9C,MAAO,CAAED,EANaE,uBAAY,SAAAC,GAC9BT,aAAaU,QAAQd,EAAKM,KAAKS,UAAUF,IAEzCF,EAASE,KACV,CAACb,K,WCnBFgB,EAAY,CAChBC,QAAS,CAAC,SAAS,UAAU,YAAY,WAAW,SAAS,YAAY,UACzEC,MAAO,CAAC,WAAW,YAAY,cAAc,aAAa,cAAc,gBAAgB,WACxFC,OAAQ,CAAC,QAAQ,QAAQ,WAAW,QAAQ,WAAW,SAAS,YAChEC,QAAS,CAAC,OAAO,OAAO,UAAU,UAAU,QAAQ,SAAS,OAC7DC,MAAO,CAAC,uBAAa,wBAAc,0BAAgB,kBAAa,oBAAe,8BAAe,wBAC9FC,SAAU,CAAC,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI,UACnCC,aAAc,CAAC,eAAK,SAAI,SAAI,SAAI,SAAI,SAAI,UACxCC,WAAY,CAAC,MAAM,SAAS,OAAO,SAAS,SAAS,WAAW,WAChEC,MAAO,CAAC,4EAAgB,gEAAc,gEAAc,0DAAa,8FAAmB,sEAAe,iEACnGC,OAAQ,CAAC,qBAAM,iCAAQ,iCAAQ,iCAAQ,2BAAO,qBAAM,mCAGhDC,EACE,EADFA,EAES,EAFTA,EAGO,EA+HEC,MA5Hf,WAAgB,IAAD,EACiC7B,EAAc,iBAAkB,aADjE,mBACL8B,EADK,KACWC,EADX,OAE8B/B,EAAc,gBAAsD,WAFlG,mBAELgC,EAFK,KAEUC,EAFV,OAGqCjC,EAAc,yBAA0B4B,GAH7E,mBAGLM,EAHK,KAGaC,EAHb,OAIuCnC,EAAc,0BAA2B,GAJhF,mBAILoC,EAJK,KAIcC,EAJd,OAKyBrC,EAAc,oBAAoB,GAL3D,mBAKLsC,EALK,KAKOC,EALP,KAQPC,EAsNR,SAAmBC,EAAGC,GAGpB,IAFA,IAAMF,EAAQ,GAELG,EAAI,EAAGA,EAAID,EAAOC,IAAK,CAG9B,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAKE,KAAK,IAAIC,KAAKN,IAEnBA,EAAEO,QAAQP,EAAEQ,UAAY,GAG1BT,EAAMM,KAAKF,GAEb,OAAOJ,EApOOU,CA2OhB,WAA0C,IAApBC,EAAmB,uDAAZ,IAAIJ,KAC/B,OAAO,IAAIA,KAAKI,EAAKC,cAAeD,EAAKE,WAAYF,EAAKF,UAAYE,EAAKG,SAAW,GA7O5EC,CAwOZ,WAA2C,IAApBJ,EAAmB,uDAAZ,IAAIJ,KAChC,OAAO,IAAIA,KAAKI,EAAKC,cAAeD,EAAKE,YAzOnBG,IACK,KAErBC,EAAiB,CACrBC,SAAU,SAGNC,EAAW1C,EAAUe,IAAkB,GAM7C,SAAS4B,EAAiBT,GACxB,IAAMV,EAAI,IAAIM,KACRc,EAAepB,EAAEW,gBAAkBD,EAAKC,eAAiBX,EAAEY,aAAeF,EAAKE,WAC/ES,EAAYX,EAAKE,WAAa,EAEpC,MAAM,OAAN,OAAcQ,EAAe,mBAAqB,GAAlD,YAAwDC,EAAY,gBAAkB,gBAGxF,IAAMC,EAAgC,aAAnBjC,EAAgC,IAAM,EACnDkC,EAAiB,CAAEC,QAAS7B,EAAmB8B,OAAQhC,GAE7D,OACE,sBAAKiC,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAf,UACE,kCACE,wCAAkB,IAClB,yBACEC,MAAOtC,EACPuC,SAAU,SAAA5D,GAAC,OAAIsB,EAAkBtB,EAAE6D,OAAOF,QAF5C,UAIE,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,WAAd,gCAGJ,kCACE,6CAAuB,IACvB,yBACEA,MAAOpC,EACPqC,SAAU,SAAA5D,GAAC,OAAIwB,EAAiBxB,EAAE6D,OAAOF,QAF3C,UAIE,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,eAAd,0BACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,SAAd,0BAGJ,kCACE,4CAAsB,IACtB,uBAAOG,KAAK,WAAWC,QAA+B,IAAtBpC,EAAyBiC,SAAU,SAAA5D,GAAC,OAAI4B,EAAqB5B,EAAE6D,OAAOE,QAAU,EAAI,SAEtH,kCACE,0CAAoB,IACpB,yBACEJ,MAAOlC,EACPmC,SAAU,SAAA5D,GAAC,OAAI0B,GAAqB1B,EAAE6D,OAAOF,QAF/C,UAIE,wBAAQA,MAAOxC,EAAf,kBACA,wBAAQwC,MAAOxC,EAAf,yBACA,wBAAQwC,MAAOxC,EAAf,6BAGJ,kCACE,+CAAyB,IACzB,uBAAO2C,KAAK,WAAWC,QAASlC,EAAY+B,SAAU,SAAA5D,GAAC,OAAI8B,EAAc9B,EAAE6D,OAAOE,kBAGtF,wBAAOL,UAAW7B,EAAW,aAAa,GAA1C,UACE,gCACE,+BACE,uBAEEqB,EAASc,KAAI,SAACC,EAAE/B,GAAH,OAAS,oBAAYgC,MAAOlB,EAAnB,SAAoCiB,GAA3B/B,MAEjC,4BAGJ,gCAEIH,EAAMiC,KAAI,SAACG,EAAGjC,GACZ,IAAMkC,EAAiBD,EAAEE,MAAK,SAAArC,GAAC,OAAoB,IAAhBA,EAAEQ,aAC/B8B,EAAchC,KAAKiC,QAAUJ,EAAE,IAAM7B,KAAKiC,OAAUJ,EAAE,GAAK,OAE3DF,EA8JpB,WAAyC,IAApBvB,EAAmB,uDAAZ,IAAIJ,KACxBuB,EAAU,IAAIvB,KAAKI,GACnB8B,GAAW9B,EAAKG,SAAW,GAAK,EAEtCgB,EAAOtB,QAAQsB,EAAOrB,UAAYgC,EAAQ,GAC1C,IAAMC,GAAiBZ,EAEvBA,EAAOa,SAAS,EAAG,GAEK,IAApBb,EAAOhB,UACPgB,EAAOa,SAAS,EAAG,GAAM,EAAIb,EAAOhB,SAAY,GAAK,GAGzD,OAAO,EAAI8B,KAAKC,MAAMH,GAAiBZ,GAAU,QA3K3BgB,CAAWV,EAAE,IAEvB,OACE,qBAAgBT,UAAWY,EAAY,oBAAoB,OAA3D,UACE,qBAAIJ,MAAO,CAACY,UAAU,SAAtB,WACU,IAANb,GAAiB,IAAN/B,IAAaoB,EAAaa,EAAE,GAAGxB,cAAgB,IAD9D,IAEIsB,KAGFE,EAAEH,KAAI,SAAAhC,GAAC,OACL,oBAAa0B,UAAWP,EAAgBnB,GAAxC,SACE,cAAC+C,EAAD,CAASrC,KAAMV,EAAGgD,YAAazB,MADvBvB,MAKd,oBAAI0B,UAAWP,EAAgBgB,EAAE,IAAjC,SAAuCC,GAAmBD,EAAE,GAAGvB,WAAa,OAZpEuB,EAAE,gBAyB5B,SAASY,EAAT,GAAoG,IAAhFrC,EAA+E,EAA/EA,KAA+E,IAAzEsC,YAAuBvD,EAAkD,EAA1DgC,OAAmC9B,EAAuB,EAAhC6B,QAI3DU,EAAQ,CACZe,QAAS,QACTC,OAAQ,SACRC,OAAQ,iBACRC,YAPe1C,KAwHnB,WAAyC,IAApBA,EAAmB,uDAAZ,IAAIJ,KAC9B,OAAO,IAAIA,KAAKI,EAAKC,cAAeD,EAAKE,WAAYF,EAAKF,WAzH/B6C,GAOH,UAAY,cAClCC,SAAU,YAINC,EAAc,CAClBtC,SAAU,QACVuC,QAAS,SAaX,OACE,sBAAKtB,MAAOA,EAAZ,UACGxB,EAAKF,UACN,qBAAK0B,MAZS,CAChBoB,SAAU,WACVG,IAAK,EACLC,MAAO,SACPC,WAAY,SAQV,SAGI,cAACC,EAAD,CAAelD,KAAMA,MAGD,IAAtBf,GAA2B,sBAAMuC,MAAOqB,EAAb,SAA2B/B,EAAQd,KAC9DjB,IAAqBN,GAAoB,sBAAM+C,MAAOqB,EAAb,SAA2B9B,EAAOf,IAASjB,IAAqBN,EAAwB,EAAI,QAK7I,SAASyE,EAAT,GAAmC,IAATlD,EAAQ,EAARA,KAWlBmD,EAASC,EAAWpD,GACtBqD,EAAM,OACNC,EAAQ,GAuBZ,OArBIC,EAAUvD,EAAMmD,EAAO,KACzBE,EAAM,eACNC,EAAQE,EAAWL,EAAO,KAEnBI,EAAUvD,EAAMmD,EAAO,KAC9BE,EAAM,eACNC,EAAQE,EAAWL,EAAO,KAEnBI,EAAUvD,EAAMmD,EAAO,KAC9BE,EAAM,eACNC,EAAQE,EAAWL,EAAO,KAEnBI,EAAUvD,EAAMmD,EAAO,KAC9BE,EAAM,eACNC,EAAQE,EAAWL,EAAO,KAEnBI,EAAUvD,EAAMmD,EAAO,MAC9BE,EAAM,eACNC,EAAQE,EAAWL,EAAO,KAGrB,sBAAM3B,MAAO,CAACjB,SAAS,SAAU+C,MAAOA,EAAxC,SAAgDD,IAsEzD,SAAStC,IAA4B,IAApBf,EAAmB,uDAAZ,IAAIJ,KACtB6D,EAAIzD,EAAK0D,iBACTC,EAAI3D,EAAK4D,cAAgB,EACvBtE,EAAIU,EAAK6D,aAEXF,EAAI,IACJF,IACAE,GAAK,IAGT,IAAMG,EAAKL,EAAI,IAAK,EACdM,EAAKD,EAAI,EAAG,EACZE,EAAI,EAAIF,EAAIC,EACZzG,EAAK,QAAUmG,EAAI,MAAO,EAC1BQ,EAAK,SAAWN,EAAI,GAAI,EAExBO,EAAIlE,EAAKmE,cACTC,EAAIF,EAAI,GAAK,EAAI,EAEvB,OAAOF,EAAI1E,EAAIhC,EAAI2G,EAAI,KAAOG,EAwDhC,SAAShB,IAAgC,IAApBpD,EAAmB,uDAAZ,IAAIJ,KAKxByE,GAAKtD,EAAOf,GAAM,SAAW,MAC7BtD,EAAgB,cAAgB,UAAgB2H,EAAI,SAAWA,EAAIA,EAKnEC,EAAuC,MAAhB5H,EAAwB,IAI/C6H,EAAiB,IAAI3E,KAAK,wBAE1B4E,GAASxE,GAAQuE,EAEjBE,EAAqBD,EAAQF,EAAsB,EAEnDI,EAAU,IAAI9E,MAAM2E,EAAkBE,EAAoBH,GAE1DK,EAAe,IAAI/E,MAAM8E,EAAU,EAAE,EAAIJ,GAEzCM,EAAW,IAAIhF,MAAM8E,EAAU,GAAMJ,GAErCO,EAAc,IAAIjF,MAAM8E,EAAU,EAAE,EAAIJ,GAExCQ,EAAc,IAAIlF,MAAM8E,EAAUJ,GAExC,MAAO,CACLI,EACAC,EACAC,EACAC,EACAC,GAqBJ,SAASvB,EAAWwB,EAAOC,GACzB,OAAOD,EAAM9E,gBAAkB+E,EAAM/E,eAChC8E,EAAM7E,aAAe8E,EAAM9E,YAC3B6E,EAAMjF,YAAckF,EAAMlF,UAGjC,SAAS0D,IAAgC,IAApBxD,EAAmB,uDAAZ,IAAIJ,KAC9B,MAAM,GAAN,OAAUI,EAAKiF,WAAWC,WAAWC,SAAS,EAAE,KAAhD,YAAwDnF,EAAKoF,aAAaF,WAAWC,SAAS,EAAE,MAGlG,SAASrE,IAA6B,IAApBd,EAAmB,uDAAZ,IAAIJ,KACrByF,EAAY,IAAIzF,KAAKI,EAAKC,cAAe,EAAG,GAElD,OAAOc,EAAOf,GAAQe,EAAOsE,GAAa,EC3b5C,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBhI,UACxC,6BAAqBiI,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07eb938f.chunk.js","sourcesContent":["// moon.py, based on code by John Walker (http://www.fourmilab.ch/)\n// ported to Python by Kevin Turner <acapnotic@twistedmatrix.com>\n// on June 6, 2001 (JDN 2452066.52491), under a full moon.\n// This program is in the public domain: \"Do what thou wilt shall be\n// the whole of the law\".\n\n/* Functions to find the phase of the moon.\n\nPorted from \\\"A Moon for the Sun\\\" (aka moontool.c), a program by the\nvenerable John Walker.  He used algoritms from \\\"Practical Astronomy\nWith Your Calculator\\\" by Peter Duffett-Smith, Second Edition.\n\nFor the full history of the code, as well as references to other\nreading material and other entertainments, please refer to John\nWalker's website,\nhttp://www.fourmilab.ch/\n(Look under the Science/Astronomy and Space heading.)\n\nThe functions of primary interest provided by this module are phase(),\nwhich gives you a variety of data on the status of the moon for a\ngiven date; and phase_hunt(), which given a date, finds the dates of\nthe nearest full moon, new moon, etc.\n*/\n\n// Precision used when describing the moon's phase in textual format,\n// in phase_string().\nconst PRECISION = 0.05\nconst NEW =   0 / 4.0\nconst FIRST = 1 / 4.0\nconst FULL = 2 / 4.0\nconst LAST = 3 / 4.0\nconst NEXTNEW = 4 / 4.0\n\n\n// class MoonPhase {\n//     /* I describe the phase of the moon.\n\n//     I have the following properties:\n//         date - a DateTime instance\n//         phase - my phase, in the range 0.0 .. 1.0\n//         phase_text - a string describing my phase\n//         illuminated - the percentage of the face of the moon illuminated\n//         angular_diameter - as seen from Earth, in degrees.\n//         sun_angular_diameter - as seen from Earth, in degrees.\n\n//         new_date - the date of the most recent new moon\n//         q1_date - the date the moon reaches 1st quarter in this cycle\n//         full_date - the date of the full moon in this cycle\n//         q3_date - the date the moon reaches 3rd quarter in this cycle\n//         nextnew_date - the date of the next new moon\n//     */\n\n//     constructor (date=new Date()) {\n//         /* MoonPhase constructor.\n\n//         Give me a date, as either a Julian Day Number or a DateTime\n//         object.*/\n\n//         if not isinstance(date, DateTime.DateTimeType):\n//             this.date = DateTime.DateTimeFromJDN(date)\n//         else:\n//             this.date = date\n\n//         self.__dict__.update(phase(self.date))\n\n//         this.phase_text = phase_string(self.phase);\n//     }\n\n//     __getattr__(self, a) {\n//         if a in ['new_date', 'q1_date', 'full_date', 'q3_date',\n//                  'nextnew_date']:\n\n//             (self.new_date, self.q1_date, self.full_date,\n//              this.q3_date, self.nextnew_date) = phase_hunt(self.date)\n\n//             return getattr(self,a)\n//         raise AttributeError(a)\n//     }\n\n//     __repr__(self) {\n//         if type(self.date) is int:\n//             const jdn = self.date\n//         else:\n//             const jdn = self.date.jdn\n\n//         return \"<%s(%d)>\" % (self.__class__, jdn)\n//     }\n\n//     __str__(self) {\n//         if type(self.date) is int:\n//             const d = DateTime.DateTimeFromJDN(self.date)\n//         else:\n//             const d = self.date\n//         const s = \"%s for %s, %s (%%%.2f illuminated)\" %\\\n//             (self.__class__, d.strftime(), self.phase_text,\n//              self.illuminated * 100)\n\n//         return s\n//     }\n\n\nclass AstronomicalConstants {\n\n    // JDN stands for Julian Day Number\n    // Angles here are in degrees\n\n    // 1980 January 0.0 in JDN\n    // XXX: DateTime(1980).jdn yields 2444239.5 -- which one is right?\n    epoch = 2444238.5\n\n    // Ecliptic longitude of the Sun at epoch 1980.0\n    ecliptic_longitude_epoch = 278.833540\n\n    // Ecliptic longitude of the Sun at perigee\n    ecliptic_longitude_perigee = 282.596403\n\n    // Eccentricity of Earth's orbit\n    eccentricity = 0.016718\n\n    // Semi-major axis of Earth's orbit, in kilometers\n    sun_smaxis = 1.49585e8\n\n    // Sun's angular size, in degrees, at semi-major axis distance\n    sun_angular_size_smaxis = 0.533128\n\n    // Elements of the Moon's orbit, epoch 1980.0\n\n    // Moon's mean longitude at the epoch\n    moon_mean_longitude_epoch = 64.975464\n    // Mean longitude of the perigee at the epoch\n    moon_mean_perigee_epoch = 349.383063\n\n    // Mean longitude of the node at the epoch\n    node_mean_longitude_epoch = 151.950429\n\n    // Inclination of the Moon's orbit\n    moon_inclination = 5.145396\n\n    // Eccentricity of the Moon's orbit\n    moon_eccentricity = 0.054900\n\n    // Moon's angular size at distance a from Earth\n    moon_angular_size = 0.5181\n\n    // Semi-mojor axis of the Moon's orbit, in kilometers\n    moon_smaxis = 384401.0\n    // Parallax at a distance a from Earth\n    moon_parallax = 0.9507\n\n    // Synodic month (new Moon to new Moon), in days\n    synodic_month = 29.53058868\n\n    // Base date for E. W. Brown's numbered series of lunations (1923 January 16)\n    lunations_base = 2423436.0\n\n    // Properties of the Earth\n\n    earth_radius = 6378.16\n}\n\nconst c = new AstronomicalConstants()\n\n// Little handy mathematical functions.\n\nconst fixangle = (a) => a - 360.0 * Math.floor(a/360.0)\nconst torad = (d) => d * Math.PI / 180.0\nconst todeg = (r) => r * 180.0 / Math.PI\n// const dsin = (d) => Math.sin(torad(d))\n// const dcos = (d) => Math.cos(torad(d))\n\nexport function phase_string(p) {\n    const phase_strings = [\n        [NEW + PRECISION, \"new\"],\n        [FIRST - PRECISION, \"waxing crescent\"],\n        [FIRST + PRECISION, \"first quarter\"],\n        [FULL - PRECISION, \"waxing gibbous\"],\n        [FULL + PRECISION, \"full\"],\n        [LAST - PRECISION, \"waning gibbous\"],\n        [LAST + PRECISION, \"last quarter\"],\n        [NEXTNEW - PRECISION, \"waning crescent\"],\n        [NEXTNEW + PRECISION, \"new\"]]\n\n    let i = phase_strings.findIndex(ps => ps[0] > p);\n\n    if (i === -1) i = 0;\n\n    return phase_strings[i][1]\n}\n\n\nexport function phase(julianDate) {\n    /* Calculate phase of moon as a fraction:\n\n    The argument is the time for which the phase is requested,\n    expressed in either a DateTime or by Julian Day Number.\n\n    Returns a dictionary containing the terminator phase angle as a\n    percentage of a full circle (i.e., 0 to 1), the illuminated\n    fraction of the Moon's disc, the Moon's age in days and fraction,\n    the distance of the Moon from the centre of the Earth, and the\n    angular diameter subtended by the Moon as seen by an observer at\n    the centre of the Earth.*/\n\n    // Calculation of the Sun's position\n\n    // // date within the epoch\n    // if hasattr(phase_date, \"jdn\"):\n    //     const day = phase_date.jdn - c.epoch\n    // else:\n    //     const day = phase_date - c.epoch\n    const day = julianDate - c.epoch;\n\n    // Mean anomaly of the Sun\n    const N = fixangle((360/365.2422) * day)\n    // Convert from perigee coordinates to epoch 1980\n    const M = fixangle(N + c.ecliptic_longitude_epoch - c.ecliptic_longitude_perigee)\n\n    // Solve Kepler's equation\n    let Ec = kepler(M, c.eccentricity)\n    Ec = Math.sqrt((1 + c.eccentricity) / (1 - c.eccentricity)) * Math.tan(Ec/2.0)\n    // True anomaly\n    Ec = 2 * todeg(Math.atan(Ec))\n    // Suns's geometric ecliptic longuitude\n    const lambda_sun = fixangle(Ec + c.ecliptic_longitude_perigee)\n\n    // Orbital distance factor\n    const F = ((1 + c.eccentricity * Math.cos(torad(Ec))) / (1 - c.eccentricity**2))\n\n    // Distance to Sun in km\n    const sun_dist = c.sun_smaxis / F\n    const sun_angular_diameter = F * c.sun_angular_size_smaxis\n\n    // Calculation of the Moon's position\n\n    // Moon's mean longitude\n    const moon_longitude = fixangle(13.1763966 * day + c.moon_mean_longitude_epoch)\n\n    // Moon's mean anomaly\n    const MM = fixangle(moon_longitude - 0.1114041 * day - c.moon_mean_perigee_epoch)\n\n    // Moon's ascending node mean longitude\n    // const MN = fixangle(c.node_mean_longitude_epoch - 0.0529539 * day)\n\n    const evection = 1.2739 * Math.sin(torad(2*(moon_longitude - lambda_sun) - MM))\n\n    // Annual equation\n    const annual_eq = 0.1858 * Math.sin(torad(M))\n\n    // Correction term\n    const A3 = 0.37 * Math.sin(torad(M))\n\n    const MmP = MM + evection - annual_eq - A3\n\n    // Correction for the equation of the centre\n    const mEc = 6.2886 * Math.sin(torad(MmP))\n\n    // Another correction term\n    const A4 = 0.214 * Math.sin(torad(2 * MmP))\n\n    // Corrected longitude\n    const lP = moon_longitude + evection + mEc - annual_eq + A4\n\n    // Variation\n    const variation = 0.6583 * Math.sin(torad(2*(lP - lambda_sun)))\n\n    // True longitude\n    const lPP = lP + variation\n\n    // Calculation of the Moon's inclination\n    // unused for phase calculation.\n\n    // Corrected longitude of the node\n    // const NP = MN - 0.16 * Math.sin(torad(M))\n\n    // Y inclination coordinate\n    // const y = Math.sin(torad(lPP - NP)) * Math.cos(torad(c.moon_inclination))\n\n    // X inclination coordinate\n    // const x = Math.cos(torad(lPP - NP))\n\n    // Ecliptic longitude (unused?)\n    // const lambda_moon = todeg(atan2(y,x)) + NP\n\n    // Ecliptic latitude (unused?)\n    // const BetaM = todeg(asin(sin(torad(lPP - NP)) * Math.sin(torad(c.moon_inclination))))\n\n    // Calculation of the phase of the Moon\n\n    // Age of the Moon, in degrees\n    const moon_age = lPP - lambda_sun\n\n    // Phase of the Moon\n    const moon_phase = (1 - Math.cos(torad(moon_age))) / 2.0\n\n    // Calculate distance of Moon from the centre of the Earth\n    const moon_dist = (c.moon_smaxis * (1 - c.moon_eccentricity**2))\n                / (1 + c.moon_eccentricity * Math.cos(torad(MmP + mEc)))\n\n    // Calculate Moon's angular diameter\n    const moon_diam_frac = moon_dist / c.moon_smaxis\n    const moon_angular_diameter = c.moon_angular_size / moon_diam_frac\n\n    // Calculate Moon's parallax (unused?)\n    // const moon_parallax = c.moon_parallax / moon_diam_frac\n\n    const res = {\n        'phase': fixangle(moon_age) / 360.0,\n        'illuminated': moon_phase,\n        'age': c.synodic_month * fixangle(moon_age) / 360.0 ,\n        'distance': moon_dist,\n        'angular_diameter': moon_angular_diameter,\n        'sun_distance': sun_dist,\n        'sun_angular_diameter': sun_angular_diameter\n    }\n\n    return res\n}\n// phase()\n\n\n// function phase_hunt(date =  new Date()) {\n//     /* Find time of phases of the moon which surround the current date.\n\n//     Five phases are found, starting and ending with the new moons\n//     which bound the current lunation.\n//     */\n\n//     // const adate = sdate + DateTime.RelativeDateTime(days=-45)\n//     let adate = new Date(date);\n//     adate.setDate(adate.getDate() - 45);\n\n//     let k1 = Math.floor((adate.getFullYear() + (adate.getMonth() * (1.0/12.0)) - 1900) * 12.3685)\n\n//     const nt1 = meanphase(adate, k1)\n//     adate = nt1\n\n//     const sdate = julian(date);\n\n//     while (1) {:\n//         adate = adate + c.synodic_month\n//         const k2 = k1 + 1\n//         const nt2 = meanphase(adate,k2)\n//         if nt1 <= sdate < nt2:\n//             break\n//         const nt1 = nt2\n//         const k1 = k2\n//     }\n\n//     const phases = list(map(truephase,\n//                  [k1,    k1,    k1,    k1,    k2],\n//                  [0/4.0, 1/4.0, 2/4.0, 3/4.0, 0/4.0]))\n\n//     return phases\n// }\n// // phase_hunt()\n\n\n// meanphase(sdate, k) {\n//     /* Calculates time of the mean new Moon for a given base date.\n\n//     This argument K to this function is the precomputed synodic month\n//     index, given by:\n\n//                         const K = (year - 1900) * 12.3685\n\n//     where year is expressed as a year and fractional year.\n//     */\n\n//     // Time in Julian centuries from 1900 January 0.5\n//     if not hasattr(sdate,'jdn'):\n//         const delta_t = sdate - DateTime.DateTime(1900,1,1,12).jdn\n//         const t = delta_t / 36525\n//     else:\n//         const delta_t = sdate - DateTime.DateTime(1900,1,1,12)\n//         const t = delta_t.days / 36525\n\n//     // square for frequent use\n//     const t2 = t * t\n//     // and cube\n//     const t3 = t2 * t\n\n//     const nt1 = (\n//         2415020.75933 + c.synodic_month * k + 0.0001178 * t2 -\n//         0.000000155 * t3 + 0.00033 * dsin(166.56 + 132.87 * t -\n//         0.009173 * t2)\n//         )\n\n//     return nt1\n// // meanphase()\n\n\n// export function truephase(k, tphase) {\n//     /* Given a K value used to determine the mean phase of the new\n//     moon, and a phase selector (0.0, 0.25, 0.5, 0.75), obtain the\n//     true, corrected phase time.*/\n\n//     let apcor = false\n\n//     // add phase to new moon time\n//     k = k + tphase\n//     // Time in Julian centuries from 1900 January 0.5\n//     const t = k / 1236.85\n\n//     const t2 = t * t\n//     const t3 = t2 * t\n\n//     // Mean time of phase\n//     let pt = (\n//         2415020.75933 + c.synodic_month * k + 0.0001178 * t2 -\n//         0.000000155 * t3 + 0.00033 * dsin(166.56 + 132.87 * t -\n//         0.009173 * t2)\n//         )\n\n//     // Sun's mean anomaly\n//     const m = 359.2242 + 29.10535608 * k - 0.0000333 * t2 - 0.00000347 * t3\n\n//     // Moon's mean anomaly\n//     const mprime = 306.0253 + 385.81691806 * k + 0.0107306 * t2 + 0.00001236 * t3\n\n//     // Moon's argument of latitude\n//     const f = 21.2964 + 390.67050646 * k - 0.0016528 * t2 - 0.00000239 * t3\n\n//     if ((tphase < 0.01) || (Math.abs(tphase - 0.5) < 0.01)) {\n\n//         // Corrections for New and Full Moon\n\n//         pt = pt + (\n//             (0.1734 - 0.000393 * t) * dsin(m)\n//             + 0.0021 * dsin(2 * m)\n//             - 0.4068 * dsin(mprime)\n//             + 0.0161 * dsin(2 * mprime)\n//             - 0.0004 * dsin(3 * mprime)\n//             + 0.0104 * dsin(2 * f)\n//             - 0.0051 * dsin(m + mprime)\n//             - 0.0074 * dsin(m - mprime)\n//             + 0.0004 * dsin(2 * f + m)\n//             - 0.0004 * dsin(2 * f - m)\n//             - 0.0006 * dsin(2 * f + mprime)\n//             + 0.0010 * dsin(2 * f - mprime)\n//             + 0.0005 * dsin(m + 2 * mprime)\n//             )\n\n//         apcor = true\n//     }\n//     else if ((Math.abs(tphase - 0.25) < 0.01) || (Math.abs(tphase - 0.75) < 0.01)) {\n\n//         pt = pt + (\n//             (0.1721 - 0.0004 * t) * dsin(m)\n//             + 0.0021 * dsin(2 * m)\n//             - 0.6280 * dsin(mprime)\n//             + 0.0089 * dsin(2 * mprime)\n//             - 0.0004 * dsin(3 * mprime)\n//             + 0.0079 * dsin(2 * f)\n//             - 0.0119 * dsin(m + mprime)\n//             - 0.0047 * dsin(m - mprime)\n//             + 0.0003 * dsin(2 * f + m)\n//             - 0.0004 * dsin(2 * f - m)\n//             - 0.0006 * dsin(2 * f + mprime)\n//             + 0.0021 * dsin(2 * f - mprime)\n//             + 0.0003 * dsin(m + 2 * mprime)\n//             + 0.0004 * dsin(m - 2 * mprime)\n//             - 0.0003 * dsin(2 * m + mprime)\n//             )\n//         }\n//         if (tphase < 0.5) {\n//             //  First quarter correction\n//             pt = pt + 0.0028 - 0.0004 * dcos(m) + 0.0003 * dcos(mprime)\n//         }\n//         else {\n//             //  Last quarter correction\n//             pt = pt + -0.0028 + 0.0004 * dcos(m) - 0.0003 * dcos(mprime)\n//         }\n//         apcor = true\n\n//     if (!apcor)\n//         throw new Error(\n//             \"TRUEPHASE called with invalid phase selector \" + tphase)\n\n//     return fromJulian(pt)\n// }\n// truephase()\n\n\nfunction kepler (m, ecc) {\n    /* Solve the equation of Kepler.*/\n\n    const epsilon = 1e-6\n\n    m = torad(m)\n    let e = m\n    while (1) {\n        const delta = e - ecc * Math.sin(e) - m\n        e = e - delta / (1.0 - ecc * Math.cos(e))\n\n        if (Math.abs(delta) <= epsilon)\n            break;\n    }\n\n    return e\n}\n\n// if __name__ == '__main__':\n//     const m = MoonPhase()\n//     const s = /* The moon is %s, %.1f%% illuminated, %.1f days old./*  %\\\n//         (m.phase_text, m.illuminated * 100, m.age)\n//     print (s)\n\n// function fromJulian (julian) {\n//     return new Date((julian-2440587.5)*864e5)\n// }","import { useCallback, useState } from \"react\";\r\n\r\nexport function useSavedState (key, defaultValue) {\r\n    const [ state, setState ] = useState(() => {\r\n        const savedState = localStorage.getItem(key);\r\n\r\n        if (savedState) {\r\n            try {\r\n                return JSON.parse(savedState);\r\n            } catch (e) {}\r\n        }\r\n\r\n        if (defaultValue instanceof Function) {\r\n            return defaultValue();\r\n        }\r\n\r\n        return defaultValue;\r\n    });\r\n\r\n    const setSavedState = useCallback(newState => {\r\n        localStorage.setItem(key, JSON.stringify(newState));\r\n\r\n        setState(newState);\r\n    }, [key]);\r\n\r\n    return [ state, setSavedState ];\r\n}","import './App.css';\nimport { phase, phase_string } from './moon';\nimport { useSavedState } from './useSavedState';\n\nconst DAY_NAMES = {\n  english: [\"Monday\",\"Tuesday\",\"Wedensday\",\"Thursday\",\"Friday\",\"Sauturday\",\"Sunday\"],\n  norse: [\"Moon day\",\"Tiw's day\",\"Woden's day\",\"Thor's day\",\"Freya's day\",\"Sauturn's day\",\"Sun day\"],\n  french: [\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\",\"dimanche\"],\n  planets: [\"Moon\",\"Mars\",\"Mercury\",\"Jupiter\",\"Venus\",\"Saturn\",\"Sun\"],\n  latin: [\"diēs Lūnae\",\"diēs Mārtis\",\"diēs Mercuriī\",\"diēs Iovis\",\"diēs Veneris\",\"diēs Sāturnī\",\"diēs Sōlis\"],\n  japanese: [\"月\",\"火\",\"水\",\"木\",\"金\",\"土\",\"日\"],\n  astronomical: [\"☽︎\",\"♂\",\"☿\",\"♃\",\"♀\",\"♄\",\"☉\"],\n  babylonian: [\"Sin\",\"Nergal\",\"Nabu\",\"Marduk\",\"Ishtar\",\"Shabattu\",\"Shamash\"],\n  greek: [\"ἡμέρᾱ Σελήνης\",\"ἡμέρᾱ Ἄρεως\",\"ἡμέρᾱ Ἑρμοῦ\",\"ἡμέρᾱ Διός\",\"ἡμέρᾱ Ἀφροδῑ́της\",\"ἡμέρᾱ Κρόνου\",\"ἡμέρᾱ Ἡλίου\"],\n  hebrew: [\"שני\",\"שלישי\",\"רביעי\",\"חמישי\",\"שישי\",\"שבת\",\"ראשון\"],\n};\n\nconst JULIAN_PREF = {\n  NONE: 0,\n  AT_MIDNIGHT: 1,\n  FROM_NOON: 2,\n};\n\nfunction App() {\n  const [ yearPreference, setYearPreference ] = useSavedState(\"mycal.yearPref\", \"gregorian\");\n  const [ dayNameOrigin, setDayNameOrigin] = useSavedState(\"mycal.dayname\", /** @type {Object.keys(DAY_NAMES)} */\"english\");\n  const [ julianPreference, setJulianPreference ] = useSavedState(\"mycal.julianPreference\", JULIAN_PREF.AT_MIDNIGHT);\n  const [ yearDayPreference, setYearDayPreference ] = useSavedState(\"mycal.yearDayPreference\", 0);\n  const [ monthBands, setMonthBands ] = useSavedState(\"mycal.monthBands\", false);\n\n  const d = startOfWeek(startOfMonth());\n  const weeks = makeWeeks(d, 100);\n\n  const dayHeaderStyle = {\n    fontSize: \"0.5em\",\n  };\n\n  const dayNames = DAY_NAMES[dayNameOrigin] || [];\n\n  /**\n   *\n   * @param {Date} date\n   */\n  function getDayClassName (date) {\n    const d = new Date();\n    const currentMonth = d.getFullYear() === date.getFullYear() && d.getMonth() === date.getMonth();\n    const monthEven = date.getMonth() % 2;\n\n    return `Day ${currentMonth ? \"Day-CurrentMonth\" : \"\"} ${monthEven ? \"Day-MonthEven\" : \"Day-MonthOdd\"}`;\n  }\n\n  const yearAdjust = yearPreference === \"holocene\" ? 1e4 : 0;\n  const dayPreferences = { yearDay: yearDayPreference, julian: julianPreference };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-Options\">\n        <label>\n          <span>Year</span>{' '}\n          <select\n            value={yearPreference}\n            onChange={e => setYearPreference(e.target.value)}\n          >\n            <option value=\"gregorian\">Gregorian</option>\n            <option value=\"holocene\">Holocene Era</option>\n          </select>\n        </label>\n        <label>\n          <span>Day Names</span>{' '}\n          <select\n            value={dayNameOrigin}\n            onChange={e => setDayNameOrigin(e.target.value)}\n          >\n            <option value=\"english\">English</option>\n            <option value=\"norse\">Norse</option>\n            <option value=\"planets\">Planets</option>\n            <option value=\"french\">French</option>\n            <option value=\"latin\">Latin</option>\n            <option value=\"japanese\">Japanese</option>\n            <option value=\"astronomical\">Astronomical</option>\n            <option value=\"babylonian\">Babylonian</option>\n            <option value=\"greek\">Greek</option>\n            <option value=\"hebrew\">Hebrew</option>\n          </select>\n        </label>\n        <label>\n          <span>Year Day</span>{' '}\n          <input type=\"checkbox\" checked={yearDayPreference === 1} onChange={e => setYearDayPreference(e.target.checked ? 1 : 0)} />\n        </label>\n        <label>\n          <span>Julian</span>{' '}\n          <select\n            value={julianPreference}\n            onChange={e => setJulianPreference(+e.target.value)}\n          >\n            <option value={JULIAN_PREF.NONE}>None</option>\n            <option value={JULIAN_PREF.AT_MIDNIGHT}>At Midnight</option>\n            <option value={JULIAN_PREF.FROM_NOON}>From Noon</option>\n          </select>\n        </label>\n        <label>\n          <span>Month Bands</span>{' '}\n          <input type=\"checkbox\" checked={monthBands} onChange={e => setMonthBands(e.target.checked)} />\n        </label>\n      </div>\n      <table className={monthBands?\"MonthBands\":\"\"}>\n        <thead>\n          <tr>\n            <th></th>\n            {\n              dayNames.map((n,i) => <th key={i} style={dayHeaderStyle}>{n}</th>)\n            }\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            weeks.map((w, i) => {\n              const isStartOfMonth = w.some(d => d.getDate() === 1);\n              const currentWeek = Date.now() >= +w[0] && Date.now() < (+w[0] + 7 * 86400000);\n\n              const n = weekNumber(w[0]);\n\n              return (\n                <tr key={+w[0]} className={currentWeek?\"Week Week-Current\":\"Week\"}>\n                  <th style={{textAlign:\"right\"}}>\n                    {(n === 1 || i === 0) && (yearAdjust + w[6].getFullYear() + \"-\")}\n                    W{n}\n                  </th>\n                  {\n                    w.map(d => (\n                      <td key={+d} className={getDayClassName(d)}>\n                        <DayView date={d} preferences={dayPreferences} />\n                      </td>\n                    ))\n                  }\n                  <th className={getDayClassName(w[6])}>{isStartOfMonth && (w[6].getMonth() + 1)}</th>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction DayView ({ date, preferences: { julian: julianPreference, yearDay: yearDayPreference } }) {\n  const isToday = +date === +startOfDay();\n\n  /** @type {import('react').CSSProperties} */\n  const style = {\n    padding: \"0.5em\",\n    margin: \"0.25em\",\n    border: \"1px solid #CCC\",\n    background: isToday ? \"#FFFFCC\" : \"transparent\",\n    position: \"relative\",\n  };\n\n  /** @type {import('react').CSSProperties} */\n  const julianStyle = {\n    fontSize: \"0.5em\",\n    display: \"block\",\n  };\n\n  /** @type {import('react').CSSProperties} */\n  const moonStyle = {\n    position: \"absolute\",\n    top: 0,\n    right: \"0.25em\",\n    lineHeight: \"0.5em\",\n  };\n\n  const allMoon = false;\n\n  return (\n    <div style={style}>\n      {date.getDate()}\n      <div style={moonStyle}>\n        { allMoon ?\n          <MoonIndicatorAll date={date} /> :\n          <MoonIndicator date={date} />\n        }\n      </div>\n      { yearDayPreference !== 0 && <span style={julianStyle}>{yearDay(date)}</span> }\n      { julianPreference !== JULIAN_PREF.NONE && <span style={julianStyle}>{julian(date) + (julianPreference === JULIAN_PREF.FROM_NOON ? 1 : 0)}</span> }\n    </div>\n  );\n}\n\nfunction MoonIndicator ({ date }) {\n  if (false) {\n    const phase = moonPhase(date);\n    let out = \"\\xA0\"; // &nbsp;\n    if (phase === 0) out = \"🌑\";\n    else if (phase === 7) out = \"🌓\";\n    else if (phase === 15) out = \"🌕\";\n    else if (phase === 22) out = \"🌗\";\n    return <span style={{fontSize:\"0.5em\"}} title={phase.toString()}>{out}</span>;\n  }\n\n  const phases = moonPhases(date);\n  let out = \"\\xA0\"; // &nbsp;\n  let title = \"\";\n\n  if (isSameDay(date, phases[0])) {\n    out = \"🌑\";\n    title = formatTime(phases[0]);\n  }\n  else if (isSameDay(date, phases[1])) {\n    out = \"🌓\";\n    title = formatTime(phases[1]);\n  }\n  else if (isSameDay(date, phases[2])) {\n    out = \"🌕\";\n    title = formatTime(phases[2]);\n  }\n  else if (isSameDay(date, phases[3])) {\n    out = \"🌗\";\n    title = formatTime(phases[3]);\n  }\n  else if (isSameDay(date, phases[4])) {\n    out = \"🌑\";\n    title = formatTime(phases[4]);\n  }\n\n  return <span style={{fontSize:\"0.5em\"}} title={title}>{out}</span>;\n}\n\nfunction MoonIndicatorAll ({ date }) {\n  const str = phase_string(phase(julian(date)).phase);\n  let out = \"\\xA0\"; // &nbsp;\n  if (str === \"new\") out = \"🌑\";\n  else if (str === \"waxing crescent\") out = \"🌒\";\n  else if (str === \"first quarter\") out = \"🌓\";\n  else if (str === \"waxing gibbous\") out = \"🌔\";\n  else if (str === \"full\") out = \"🌕\";\n  else if (str === \"waning gibbous\") out = \"🌖\";\n  else if (str === \"last quarter\") out = \"🌗\";\n  else if (str === \"waning crescent\") out = \"🌘\";\n  return <span style={{fontSize:\"0.5em\"}}>{out}</span>;\n}\n\nfunction makeWeeks(d, count) {\n  const weeks = [];\n\n  for (let i = 0; i < count; i++) {\n    const week = [];\n\n    for (let j = 0; j < 7; j++) {\n      week.push(new Date(d));\n\n      d.setDate(d.getDate() + 1);\n    }\n\n    weeks.push(week);\n  }\n  return weeks;\n}\n\nfunction startOfMonth (date = new Date()) {\n  return new Date(date.getFullYear(), date.getMonth());\n}\n\nfunction startOfWeek (date = new Date()) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate() - date.getDay() + 1);\n}\n\nfunction startOfDay (date = new Date()) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n\n/**\n * ISO Week Number\n * Algorithm from https://www.epochconverter.com/weeknumbers\n */\nfunction weekNumber (date = new Date()) {\n  const target  = new Date(date);\n  const dayNr   = (date.getDay() + 6) % 7;\n\n  target.setDate(target.getDate() - dayNr + 3);\n  const firstThursday = +target;\n\n  target.setMonth(0, 1);\n\n  if (target.getDay() !== 4) {\n      target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);\n  }\n\n  return 1 + Math.ceil((firstThursday - +target) / 604800000);\n}\n\n/**\n * Algorithm from https://quasar.as.utexas.edu/BillInfo/JulianDatesG.html\n */\nfunction julian (date = new Date()) {\n  let y = date.getUTCFullYear();\n  let m = date.getUTCMonth() + 1;\n  const d = date.getUTCDate();\n\n  if (m < 3) {\n      y--;\n      m += 12;\n  }\n\n  const a = (y / 100)|0;\n  const b = (a / 4)|0;\n  const c = 2 - a + b;\n  const e = (365.25 * (y + 4716))|0;\n  const f = (30.6001 * (m + 1))|0;\n\n  const h = date.getUTCHours();\n  const g = h < 12 ? 1 : 0;\n\n  return c + d + e + f - 1524 - g;\n}\n\nfunction moonPhase (date = new Date()) {\n  if (false) return moonPhase1(date);\n  if (false) return moonPhase2(date);\n  if (false) return moonPhase3(date);\n  if (true) return moonPhase4(date);\n}\n\n/**\n * Algorithm from http://www.ben-daglish.net/moon.shtml\n * @param {Date} date\n * @returns\n */\nfunction moonPhase1 (date = new Date()) {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDay();\n\tlet r = year % 100;\n\tr %= 19;\n\tif (r>9){ r -= 19;}\n\tr = ((r * 11) % 30) + month + day;\n\tif (month<3){r += 2;}\n\tr -= ((year<2000) ? 4 : 8.3);\n\tr = Math.floor(r+0.5)%30;\n\treturn (r < 0) ? r+30 : r;\n}\n\n/**\n * Algorithm from http://www.ben-daglish.net/moon.shtml\n * @param {Date} date\n * @returns\n */\nfunction moonPhase2 (date = new Date()) {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n\tconst n = Math.floor(12.37 * (year - 1900 + ((1 * month - 0.5)/12.0)));\n\tconst RAD = 3.14159265/180.0;\n\tconst t = n / 1236.85;\n\tconst t2 = t * t;\n\tconst as = 359.2242 + 29.105356 * n;\n\tconst am = 306.0253 + 385.816918 * n + 0.010730 * t2;\n\tlet xtra = 0.75933 + 1.53058868 * n + ((1.178e-4) - (1.55e-7) * t) * t2;\n\txtra += (0.1734 - 3.93e-4 * t) * Math.sin(RAD * as) - 0.4068 * Math.sin(RAD * am);\n\tconst i = (xtra > 0.0 ? Math.floor(xtra) :  Math.ceil(xtra - 1.0));\n\tconst j1 = julian(date);\n\tconst jd = (2415020 + 28 * n) + i;\n\treturn (j1-jd + 30)%30;\n}\n\nfunction moonPhase3 (date = new Date()) {\n  return Math.round(phase(julian(date)).phase * 30) % 30;\n}\n\n// Algorithm by me\nfunction moonPhases (date = new Date()) {\n  // From https://minkukel.com/en/various/calculating-moon-phase/\n  // const synodic_month = 29.53058770576;\n\n  // From wikipedia\n  const T = (julian(date)-2451545.0)/36525;\n  const synodic_month = 29.5305888531 + 0.00000021621 * T - 3.64e-10 * T * T;\n\n  // From regression of full moons in 2021\n  // const synodic_month = 29.555744949494947;\n\n  const synodic_month_millis = synodic_month * 86400 * 1000;\n\n  // const epoch_new_moon = new Date(\"2000-01-06T18:14Z\");\n  // const epoch_new_moon = new Date(\"2020-01-03T04:45:00Z\");\n  const epoch_new_moon = new Date(\"2021-01-13T05:00:00Z\");\n\n  const delta = +date - +epoch_new_moon;\n\n  const lunar_cycle_count = (delta / synodic_month_millis)|0;\n\n  const newMoon = new Date(+epoch_new_moon + (lunar_cycle_count * synodic_month_millis));\n\n  const firstQuarter = new Date(+newMoon + 1/4 * synodic_month_millis);\n\n  const fullMoon = new Date(+newMoon + 1/2 * synodic_month_millis);\n\n  const lastQuarter = new Date(+newMoon + 3/4 * synodic_month_millis);\n\n  const nextNewMoon = new Date(+newMoon + synodic_month_millis);\n\n  return [\n    newMoon,\n    firstQuarter,\n    fullMoon,\n    lastQuarter,\n    nextNewMoon,\n  ];\n}\n\nfunction moonPhase4 (date = new Date()) {\n  const phases = moonPhases(date);\n\n  if (isSameDay(date, phases[0])) return 0;\n  if (isSameDay(date, phases[1])) return 7;\n  if (isSameDay(date, phases[2])) return 15;\n  if (isSameDay(date, phases[3])) return 22;\n  if (isSameDay(date, phases[4])) return 0;\n\n  return -1;\n}\n\n/**\n *\n * @param {Date} date1\n * @param {Date} date2\n */\nfunction isSameDay (date1, date2) {\n  return date1.getFullYear() === date2.getFullYear()\n    && date1.getMonth() === date2.getMonth()\n    && date1.getDate() === date2.getDate();\n}\n\nfunction formatTime (date = new Date()) {\n  return `${date.getHours().toString().padStart(2,\"0\")}:${date.getMinutes().toString().padStart(2,\"0\")}`;\n}\n\nfunction yearDay (date = new Date()) {\n  const first_jan = new Date(date.getFullYear(), 0, 1);\n\n  return julian(date) - julian(first_jan) + 1;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}